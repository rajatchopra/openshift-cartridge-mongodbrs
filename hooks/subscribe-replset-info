#!/usr/bin/oo-ruby

require 'mongo'

gear_id = ARGV[0]
sub_info = ARGV[3].gsub("'","").gsub("\n","").split(' ').map { |si| si.split('=') }

gear_list = sub_info.map { |si| si[0] }.sort
addr_list = sub_info.map { |si| si[1] }

exit 0 if gear_id!=gear_list.first

#initiate rs with first one
master = addr_list.first
slave_list = addr_list[1..-1]


# check if replica set already exists

begin
  master_db = Mongo::MongoClient.new(master.split(':').first, master.split(':')[1].to_i).db('admin')
rescue Mongo::ConnectionFailure
  puts "CLIENT_ERROR : Failed to connect to #{master}"
  exit 1
end

#check if replset already has the correct members..
begin
  status = master_db.command({ "replSetGetStatus" => nil })
  if status.has_key? "members" and status["members"].length==(slave_list.length+1)
    puts "Replica set already exists"
    exit 0
  end
rescue Mongo::OperationFailure=>of
  # expected if rs.initiate has not been done yet
end


config = { '_id' => ENV['OPENSHIFT_APP_NAME'], "members" => [ { '_id' => 0, 'host' => master} ] }
id = 1
slave_list.each { |slave|
  config["members"] << { '_id' => id, 'host' => slave }
  id += 1
}
begin
  master_db.command({ "replSetInitiate" => config })
rescue Mongo::OperationFailure => of
  # replica set is already set?
  if of.result["errmsg"].include? "already initialized"
    # reconfig
    config["version"] = (slave_list.length + 1)
    master_db.command({ "replSetReconfig" => config })
  end
end

exit 0
